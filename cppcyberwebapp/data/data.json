{
  "Limited_test_cases/Buffer_underwrite.cpp": {
    "token": {
      "toks": "int main ( ) { char destBuf [ 1024 ] ; char srcBuf [ 1024 ] ; std :: string s1 ; s1 = \"This string is fair short.\" ; srcBuf [ 0 ] = '\\0' ; strncpy ( destBuf , & srcBuf [ s1 . find ( \"abc\" ) ] , 100 ) ; } ",
      "num_checks": 27,
      "errs": [""],
      "preprocessor_config": ""
    },
    "data": {
      "1": {
        "code": "#include <iostream>",
        "message": "",
        "status": "Checked"
      },
      "2": {
        "code": "#include <string>",
        "message": "",
        "status": "Checked"
      },
      "3": {
        "code": "using namespace std;",
        "message": "",
        "status": "Checked"
      },
      "4": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "5": {
        "code": "int main() {",
        "message": "",
        "status": "Checked"
      },
      "6": {
        "code": "char destBuf[1024],srcBuf[1024];",
        "message": "",
        "status": "Checked"
      },
      "7": {
        "code": "string s1 = \"This string is fair short.\";",
        "message": "",
        "status": "Checked"
      },
      "8": {
        "code": "srcBuf[0]='\\0';",
        "message": "",
        "status": "Checked"
      },
      "9": {
        "code": "strncpy(destBuf, &srcBuf[s1.find(\"abc\")], 100); ",
        "message": "",
        "status": "Checked"
      },
      "10": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "11": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "12": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "13": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "14": {
        "code": "",
        "message": "",
        "status": "Checked"
      }
    }
  },
  "Limited_test_cases/CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_12.cpp": {
    "token": {
      "toks": "namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_12 { void bad ( ) { wchar_t * data ; data = NULL ; if ( global_returns_t_or_f ( ) ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { data = new wchar_t ; } if ( global_returns_t_or_f ( ) ) { delete data ; } else { free ( data ) ; } } static void goodB2G ( ) { wchar_t * data ; data = NULL ; if ( global_returns_t_or_f ( ) ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } if ( global_returns_t_or_f ( ) ) { free ( data ) ; } else { free ( data ) ; } } static void goodG2B ( ) { wchar_t * data ; data = NULL ; if ( global_returns_t_or_f ( ) ) { data = new wchar_t ; } else { data = new wchar_t ; } if ( global_returns_t_or_f ( ) ) { delete data ; } else { delete data ; } } void good ( ) { goodB2G ( ) ; goodG2B ( ) ; } } using namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_12 ; int main ( int argc , char * argv [ ] ) { srand ( ( int ) time ( NULL ) ) ; printLine ( \"Calling good()...\" ) ; good ( ) ; printLine ( \"Finished good()\" ) ; printLine ( \"Calling bad()...\" ) ; bad ( ) ; printLine ( \"Finished bad()\" ) ; return 0 ; } ",
      "errs": [
        "Limited_test_cases/CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_12.cpp:53:9: error: Mismatching allocation and deallocation: data [mismatchAllocDealloc]|%$%|        free(data);|%$%|        ^"
      ],
      "num_checks": 27,
      "preprocessor_config": ""
    },
    "data": {
      "1": {
        "code": "/* TEMPLATE GENERATED TESTCASE FILE",
        "message": "",
        "status": "Checked"
      },
      "2": {
        "code": "Filename: CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_12.cpp",
        "message": "",
        "status": "Checked"
      },
      "3": {
        "code": "Label Definition File: CWE762_Mismatched_Memory_Management_Routines__strdup_delete.label.xml",
        "message": "",
        "status": "Checked"
      },
      "4": {
        "code": "Template File: sources-sinks-12.tmpl.cpp",
        "message": "",
        "status": "Checked"
      },
      "5": {
        "code": "*/",
        "message": "",
        "status": "Checked"
      },
      "6": {
        "code": "/*",
        "message": "",
        "status": "Checked"
      },
      "7": {
        "code": " * @description",
        "message": "",
        "status": "Checked"
      },
      "8": {
        "code": " * CWE: 762 Mismatched Memory Management Routines",
        "message": "",
        "status": "Checked"
      },
      "9": {
        "code": " * BadSource:  Allocate data using wcsdup()",
        "message": "",
        "status": "Checked"
      },
      "10": {
        "code": " * GoodSource: Allocate data using new",
        "message": "",
        "status": "Checked"
      },
      "11": {
        "code": " * Sinks:",
        "message": "",
        "status": "Checked"
      },
      "12": {
        "code": " *    GoodSink: Deallocate data using free()",
        "message": "",
        "status": "Checked"
      },
      "13": {
        "code": " *    BadSink : Deallocate data using delete",
        "message": "",
        "status": "Checked"
      },
      "14": {
        "code": " * Flow Variant: 12 Control flow: if(global_returns_t_or_f())",
        "message": "",
        "status": "Checked"
      },
      "15": {
        "code": " * */",
        "message": "",
        "status": "Checked"
      },
      "16": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "17": {
        "code": "#include \"std_testcase.h\"",
        "message": "",
        "status": "Checked"
      },
      "18": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "19": {
        "code": "#include <wchar.h>",
        "message": "",
        "status": "Checked"
      },
      "20": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "21": {
        "code": "namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_12",
        "message": "",
        "status": "Checked"
      },
      "22": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "23": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "24": {
        "code": "#ifndef OMITBAD",
        "message": "",
        "status": "Checked"
      },
      "25": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "26": {
        "code": "void bad()",
        "message": "",
        "status": "Checked"
      },
      "27": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "28": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "29": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "30": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "31": {
        "code": "    if(global_returns_t_or_f())",
        "message": "",
        "status": "Checked"
      },
      "32": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "33": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "34": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "35": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "36": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "37": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "38": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "39": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "40": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "41": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "42": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "43": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "44": {
        "code": "    if(global_returns_t_or_f())",
        "message": "",
        "status": "Checked"
      },
      "45": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "46": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "47": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "48": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "49": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "50": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "51": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "52": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "53": {
        "code": "        free(data);",
        "message": "Mismatching allocation and deallocation",
        "status": "Checked"
      },
      "54": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "55": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "56": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "57": {
        "code": "#endif /* OMITBAD */",
        "message": "",
        "status": "Checked"
      },
      "58": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "59": {
        "code": "#ifndef OMITGOOD",
        "message": "",
        "status": "Checked"
      },
      "60": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "61": {
        "code": "/* goodB2G() - use badsource and goodsink by changing the first \"if\" so that",
        "message": "",
        "status": "Checked"
      },
      "62": {
        "code": "   both branches use the BadSource and the second \"if\" so that both branches",
        "message": "",
        "status": "Checked"
      },
      "63": {
        "code": "   use the GoodSink */",
        "message": "",
        "status": "Checked"
      },
      "64": {
        "code": "static void goodB2G()",
        "message": "",
        "status": "Checked"
      },
      "65": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "66": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "67": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "68": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "69": {
        "code": "    if(global_returns_t_or_f())",
        "message": "",
        "status": "Checked"
      },
      "70": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "71": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "72": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "73": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "74": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "75": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "76": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "77": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "78": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "79": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "80": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "81": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "82": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "83": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "84": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "85": {
        "code": "    if(global_returns_t_or_f())",
        "message": "",
        "status": "Checked"
      },
      "86": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "87": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "88": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "89": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "90": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "91": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "92": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "93": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "94": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "95": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "96": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "97": {
        "code": "/* goodG2B() - use goodsource and badsink by changing the first \"if\" so that",
        "message": "",
        "status": "Checked"
      },
      "98": {
        "code": "   both branches use the GoodSource and the second \"if\" so that both branches",
        "message": "",
        "status": "Checked"
      },
      "99": {
        "code": "   use the BadSink */",
        "message": "",
        "status": "Checked"
      },
      "100": {
        "code": "static void goodG2B()",
        "message": "",
        "status": "Checked"
      },
      "101": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "102": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "103": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "104": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "105": {
        "code": "    if(global_returns_t_or_f())",
        "message": "",
        "status": "Checked"
      },
      "106": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "107": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "108": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "109": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "110": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "111": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "112": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "113": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "114": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "115": {
        "code": "    if(global_returns_t_or_f())",
        "message": "",
        "status": "Checked"
      },
      "116": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "117": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "118": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "119": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "120": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "121": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "122": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "123": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "124": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "125": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "126": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "127": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "128": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "129": {
        "code": "void good()",
        "message": "",
        "status": "Checked"
      },
      "130": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "131": {
        "code": "    goodB2G();",
        "message": "",
        "status": "Checked"
      },
      "132": {
        "code": "    goodG2B();",
        "message": "",
        "status": "Checked"
      },
      "133": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "134": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "135": {
        "code": "#endif /* OMITGOOD */",
        "message": "",
        "status": "Checked"
      },
      "136": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "137": {
        "code": "} // close namespace",
        "message": "",
        "status": "Checked"
      },
      "138": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "139": {
        "code": "/* Below is the main(). It is only used when building this testcase on",
        "message": "",
        "status": "Checked"
      },
      "140": {
        "code": "   its own for testing or for building a binary to use in testing binary",
        "message": "",
        "status": "Checked"
      },
      "141": {
        "code": "   analysis tools. It is not used when compiling all the testcases as one",
        "message": "",
        "status": "Checked"
      },
      "142": {
        "code": "   application, which is how source code analysis tools are tested. */",
        "message": "",
        "status": "Checked"
      },
      "143": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "144": {
        "code": "#ifdef INCLUDEMAIN",
        "message": "",
        "status": "Checked"
      },
      "145": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "146": {
        "code": "using namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_12; // so that we can use good and bad easily",
        "message": "",
        "status": "Checked"
      },
      "147": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "148": {
        "code": "int main(int argc, char * argv[])",
        "message": "",
        "status": "Checked"
      },
      "149": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "150": {
        "code": "    /* seed randomness */",
        "message": "",
        "status": "Checked"
      },
      "151": {
        "code": "    srand( (unsigned)time(NULL) );",
        "message": "",
        "status": "Checked"
      },
      "152": {
        "code": "#ifndef OMITGOOD",
        "message": "",
        "status": "Checked"
      },
      "153": {
        "code": "    printLine(\"Calling good()...\");",
        "message": "",
        "status": "Checked"
      },
      "154": {
        "code": "    good();",
        "message": "",
        "status": "Checked"
      },
      "155": {
        "code": "    printLine(\"Finished good()\");",
        "message": "",
        "status": "Checked"
      },
      "156": {
        "code": "#endif /* OMITGOOD */",
        "message": "",
        "status": "Checked"
      },
      "157": {
        "code": "#ifndef OMITBAD",
        "message": "",
        "status": "Checked"
      },
      "158": {
        "code": "    printLine(\"Calling bad()...\");",
        "message": "",
        "status": "Checked"
      },
      "159": {
        "code": "    bad();",
        "message": "",
        "status": "Checked"
      },
      "160": {
        "code": "    printLine(\"Finished bad()\");",
        "message": "",
        "status": "Checked"
      },
      "161": {
        "code": "#endif /* OMITBAD */",
        "message": "",
        "status": "Checked"
      },
      "162": {
        "code": "    return 0;",
        "message": "",
        "status": "Checked"
      },
      "163": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "164": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "165": {
        "code": "#endif",
        "message": "",
        "status": "Checked"
      }
    }
  },
  "Limited_test_cases/CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_13.cpp": {
    "token": {
      "toks": "namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_13 { void bad ( ) { wchar_t * data ; data = NULL ; if ( global_const_five == 5 ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { data = new wchar_t ; } if ( global_const_five == 5 ) { delete data ; } else { free ( data ) ; } } static void goodB2G1 ( ) { wchar_t * data ; data = NULL ; if ( global_const_five == 5 ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { data = new wchar_t ; } if ( global_const_five != 5 ) { delete data ; } else { free ( data ) ; } } static void goodB2G2 ( ) { wchar_t * data ; data = NULL ; if ( global_const_five == 5 ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { data = new wchar_t ; } if ( global_const_five == 5 ) { free ( data ) ; } else { delete data ; } } static void goodG2B1 ( ) { wchar_t * data ; data = NULL ; if ( global_const_five != 5 ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { data = new wchar_t ; } if ( global_const_five == 5 ) { delete data ; } else { free ( data ) ; } } static void goodG2B2 ( ) { wchar_t * data ; data = NULL ; if ( global_const_five == 5 ) { data = new wchar_t ; } else { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } if ( global_const_five == 5 ) { delete data ; } else { free ( data ) ; } } void good ( ) { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B1 ( ) ; goodG2B2 ( ) ; } } using namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_13 ; int main ( int argc , char * argv [ ] ) { srand ( ( int ) time ( NULL ) ) ; printLine ( \"Calling good()...\" ) ; good ( ) ; printLine ( \"Finished good()\" ) ; printLine ( \"Calling bad()...\" ) ; bad ( ) ; printLine ( \"Finished bad()\" ) ; return 0 ; } ",
      "errs": [
        "Limited_test_cases/CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_13.cpp:195:9: error: Mismatching allocation and deallocation: data [mismatchAllocDealloc]|%$%|        free(data);|%$%|        ^"
      ],
      "num_checks": 27,
      "preprocessor_config": ""
    },
    "data": {
      "1": {
        "code": "/* TEMPLATE GENERATED TESTCASE FILE",
        "message": "",
        "status": "Checked"
      },
      "2": {
        "code": "Filename: CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_13.cpp",
        "message": "",
        "status": "Checked"
      },
      "3": {
        "code": "Label Definition File: CWE762_Mismatched_Memory_Management_Routines__strdup_delete.label.xml",
        "message": "",
        "status": "Checked"
      },
      "4": {
        "code": "Template File: sources-sinks-13.tmpl.cpp",
        "message": "",
        "status": "Checked"
      },
      "5": {
        "code": "*/",
        "message": "",
        "status": "Checked"
      },
      "6": {
        "code": "/*",
        "message": "",
        "status": "Checked"
      },
      "7": {
        "code": " * @description",
        "message": "",
        "status": "Checked"
      },
      "8": {
        "code": " * CWE: 762 Mismatched Memory Management Routines",
        "message": "",
        "status": "Checked"
      },
      "9": {
        "code": " * BadSource:  Allocate data using wcsdup()",
        "message": "",
        "status": "Checked"
      },
      "10": {
        "code": " * GoodSource: Allocate data using new",
        "message": "",
        "status": "Checked"
      },
      "11": {
        "code": " * Sinks:",
        "message": "",
        "status": "Checked"
      },
      "12": {
        "code": " *    GoodSink: Deallocate data using free()",
        "message": "",
        "status": "Checked"
      },
      "13": {
        "code": " *    BadSink : Deallocate data using delete",
        "message": "",
        "status": "Checked"
      },
      "14": {
        "code": " * Flow Variant: 13 Control flow: if(global_const_five==5) and if(global_const_five!=5)",
        "message": "",
        "status": "Checked"
      },
      "15": {
        "code": " * */",
        "message": "",
        "status": "Checked"
      },
      "16": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "17": {
        "code": "#include \"std_testcase.h\"",
        "message": "",
        "status": "Checked"
      },
      "18": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "19": {
        "code": "#include <wchar.h>",
        "message": "",
        "status": "Checked"
      },
      "20": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "21": {
        "code": "namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_13",
        "message": "",
        "status": "Checked"
      },
      "22": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "23": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "24": {
        "code": "#ifndef OMITBAD",
        "message": "",
        "status": "Checked"
      },
      "25": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "26": {
        "code": "void bad()",
        "message": "",
        "status": "Checked"
      },
      "27": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "28": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "29": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "30": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "31": {
        "code": "    if(global_const_five==5)",
        "message": "",
        "status": "Checked"
      },
      "32": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "33": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "34": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "35": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "36": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "37": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "38": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "39": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "40": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "41": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "42": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "43": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "44": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "45": {
        "code": "    if(global_const_five==5)",
        "message": "",
        "status": "Checked"
      },
      "46": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "47": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "48": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "49": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "50": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "51": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "52": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "53": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "54": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "55": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "56": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "57": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "58": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "59": {
        "code": "#endif /* OMITBAD */",
        "message": "",
        "status": "Checked"
      },
      "60": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "61": {
        "code": "#ifndef OMITGOOD",
        "message": "",
        "status": "Checked"
      },
      "62": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "63": {
        "code": "/* goodB2G1() - use badsource and goodsink by changing the second global_const_five==5 to global_const_five!=5 */",
        "message": "",
        "status": "Checked"
      },
      "64": {
        "code": "static void goodB2G1()",
        "message": "",
        "status": "Checked"
      },
      "65": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "66": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "67": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "68": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "69": {
        "code": "    if(global_const_five==5)",
        "message": "",
        "status": "Checked"
      },
      "70": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "71": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "72": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "73": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "74": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "75": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "76": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "77": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "78": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "79": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "80": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "81": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "82": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "83": {
        "code": "    if(global_const_five!=5)",
        "message": "",
        "status": "Checked"
      },
      "84": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "85": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "86": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "87": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "88": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "89": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "90": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "91": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "92": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "93": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "94": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "95": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "96": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "97": {
        "code": "/* goodB2G2() - use badsource and goodsink by reversing the blocks in the second if */",
        "message": "",
        "status": "Checked"
      },
      "98": {
        "code": "static void goodB2G2()",
        "message": "",
        "status": "Checked"
      },
      "99": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "100": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "101": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "102": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "103": {
        "code": "    if(global_const_five==5)",
        "message": "",
        "status": "Checked"
      },
      "104": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "105": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "106": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "107": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "108": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "109": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "110": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "111": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "112": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "113": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "114": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "115": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "116": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "117": {
        "code": "    if(global_const_five==5)",
        "message": "",
        "status": "Checked"
      },
      "118": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "119": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "120": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "121": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "122": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "123": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "124": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "125": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "126": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "127": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "128": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "129": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "130": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "131": {
        "code": "/* goodG2B1() - use goodsource and badsink by changing the first global_const_five==5 to global_const_five!=5 */",
        "message": "",
        "status": "Checked"
      },
      "132": {
        "code": "static void goodG2B1()",
        "message": "",
        "status": "Checked"
      },
      "133": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "134": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "135": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "136": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "137": {
        "code": "    if(global_const_five!=5)",
        "message": "",
        "status": "Checked"
      },
      "138": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "139": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "140": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "141": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "142": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "143": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "144": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "145": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "146": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "147": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "148": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "149": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "150": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "151": {
        "code": "    if(global_const_five==5)",
        "message": "",
        "status": "Checked"
      },
      "152": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "153": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "154": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "155": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "156": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "157": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "158": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "159": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "160": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "161": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "162": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "163": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "164": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "165": {
        "code": "/* goodG2B2() - use goodsource and badsink by reversing the blocks in the first if */",
        "message": "",
        "status": "Checked"
      },
      "166": {
        "code": "static void goodG2B2()",
        "message": "",
        "status": "Checked"
      },
      "167": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "168": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "169": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "170": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "171": {
        "code": "    if(global_const_five==5)",
        "message": "",
        "status": "Checked"
      },
      "172": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "173": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "174": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "175": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "176": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "177": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "178": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "179": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "180": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "181": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "182": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "183": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "184": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "185": {
        "code": "    if(global_const_five==5)",
        "message": "",
        "status": "Checked"
      },
      "186": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "187": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "188": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "189": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "190": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "191": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "192": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "193": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "194": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "195": {
        "code": "        free(data);",
        "message": "Mismatching allocation and deallocation",
        "status": "Checked"
      },
      "196": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "197": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "198": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "199": {
        "code": "void good()",
        "message": "",
        "status": "Checked"
      },
      "200": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "201": {
        "code": "    goodB2G1();",
        "message": "",
        "status": "Checked"
      },
      "202": {
        "code": "    goodB2G2();",
        "message": "",
        "status": "Checked"
      },
      "203": {
        "code": "    goodG2B1();",
        "message": "",
        "status": "Checked"
      },
      "204": {
        "code": "    goodG2B2();",
        "message": "",
        "status": "Checked"
      },
      "205": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "206": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "207": {
        "code": "#endif /* OMITGOOD */",
        "message": "",
        "status": "Checked"
      },
      "208": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "209": {
        "code": "} // close namespace",
        "message": "",
        "status": "Checked"
      },
      "210": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "211": {
        "code": "/* Below is the main(). It is only used when building this testcase on",
        "message": "",
        "status": "Checked"
      },
      "212": {
        "code": "   its own for testing or for building a binary to use in testing binary",
        "message": "",
        "status": "Checked"
      },
      "213": {
        "code": "   analysis tools. It is not used when compiling all the testcases as one",
        "message": "",
        "status": "Checked"
      },
      "214": {
        "code": "   application, which is how source code analysis tools are tested. */",
        "message": "",
        "status": "Checked"
      },
      "215": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "216": {
        "code": "#ifdef INCLUDEMAIN",
        "message": "",
        "status": "Checked"
      },
      "217": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "218": {
        "code": "using namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_13; // so that we can use good and bad easily",
        "message": "",
        "status": "Checked"
      },
      "219": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "220": {
        "code": "int main(int argc, char * argv[])",
        "message": "",
        "status": "Checked"
      },
      "221": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "222": {
        "code": "    /* seed randomness */",
        "message": "",
        "status": "Checked"
      },
      "223": {
        "code": "    srand( (unsigned)time(NULL) );",
        "message": "",
        "status": "Checked"
      },
      "224": {
        "code": "#ifndef OMITGOOD",
        "message": "",
        "status": "Checked"
      },
      "225": {
        "code": "    printLine(\"Calling good()...\");",
        "message": "",
        "status": "Checked"
      },
      "226": {
        "code": "    good();",
        "message": "",
        "status": "Checked"
      },
      "227": {
        "code": "    printLine(\"Finished good()\");",
        "message": "",
        "status": "Checked"
      },
      "228": {
        "code": "#endif /* OMITGOOD */",
        "message": "",
        "status": "Checked"
      },
      "229": {
        "code": "#ifndef OMITBAD",
        "message": "",
        "status": "Checked"
      },
      "230": {
        "code": "    printLine(\"Calling bad()...\");",
        "message": "",
        "status": "Checked"
      },
      "231": {
        "code": "    bad();",
        "message": "",
        "status": "Checked"
      },
      "232": {
        "code": "    printLine(\"Finished bad()\");",
        "message": "",
        "status": "Checked"
      },
      "233": {
        "code": "#endif /* OMITBAD */",
        "message": "",
        "status": "Checked"
      },
      "234": {
        "code": "    return 0;",
        "message": "",
        "status": "Checked"
      },
      "235": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "236": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "237": {
        "code": "#endif",
        "message": "",
        "status": "Checked"
      }
    }
  },
  "Limited_test_cases/CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_14.cpp": {
    "token": {
      "toks": "namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_14 { void bad ( ) { wchar_t * data ; data = NULL ; if ( global_five == 5 ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { data = new wchar_t ; } if ( global_five == 5 ) { delete data ; } else { free ( data ) ; } } static void goodB2G1 ( ) { wchar_t * data ; data = NULL ; if ( global_five == 5 ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { data = new wchar_t ; } if ( global_five != 5 ) { delete data ; } else { free ( data ) ; } } static void goodB2G2 ( ) { wchar_t * data ; data = NULL ; if ( global_five == 5 ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { data = new wchar_t ; } if ( global_five == 5 ) { free ( data ) ; } else { delete data ; } } static void goodG2B1 ( ) { wchar_t * data ; data = NULL ; if ( global_five != 5 ) { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } else { data = new wchar_t ; } if ( global_five == 5 ) { delete data ; } else { free ( data ) ; } } static void goodG2B2 ( ) { wchar_t * data ; data = NULL ; if ( global_five == 5 ) { data = new wchar_t ; } else { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } if ( global_five == 5 ) { delete data ; } else { free ( data ) ; } } void good ( ) { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B1 ( ) ; goodG2B2 ( ) ; } } using namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_14 ; int main ( int argc , char * argv [ ] ) { srand ( ( int ) time ( NULL ) ) ; printLine ( \"Calling good()...\" ) ; good ( ) ; printLine ( \"Finished good()\" ) ; printLine ( \"Calling bad()...\" ) ; bad ( ) ; printLine ( \"Finished bad()\" ) ; return 0 ; } ",
      "errs": [
        "Limited_test_cases/CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_14.cpp:195:9: error: Mismatching allocation and deallocation: data [mismatchAllocDealloc]|%$%|        free(data);|%$%|        ^"
      ],
      "num_checks": 27,
      "preprocessor_config": ""
    },
    "data": {
      "1": {
        "code": "/* TEMPLATE GENERATED TESTCASE FILE",
        "message": "",
        "status": "Checked"
      },
      "2": {
        "code": "Filename: CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_14.cpp",
        "message": "",
        "status": "Checked"
      },
      "3": {
        "code": "Label Definition File: CWE762_Mismatched_Memory_Management_Routines__strdup_delete.label.xml",
        "message": "",
        "status": "Checked"
      },
      "4": {
        "code": "Template File: sources-sinks-14.tmpl.cpp",
        "message": "",
        "status": "Checked"
      },
      "5": {
        "code": "*/",
        "message": "",
        "status": "Checked"
      },
      "6": {
        "code": "/*",
        "message": "",
        "status": "Checked"
      },
      "7": {
        "code": " * @description",
        "message": "",
        "status": "Checked"
      },
      "8": {
        "code": " * CWE: 762 Mismatched Memory Management Routines",
        "message": "",
        "status": "Checked"
      },
      "9": {
        "code": " * BadSource:  Allocate data using wcsdup()",
        "message": "",
        "status": "Checked"
      },
      "10": {
        "code": " * GoodSource: Allocate data using new",
        "message": "",
        "status": "Checked"
      },
      "11": {
        "code": " * Sinks:",
        "message": "",
        "status": "Checked"
      },
      "12": {
        "code": " *    GoodSink: Deallocate data using free()",
        "message": "",
        "status": "Checked"
      },
      "13": {
        "code": " *    BadSink : Deallocate data using delete",
        "message": "",
        "status": "Checked"
      },
      "14": {
        "code": " * Flow Variant: 14 Control flow: if(global_five==5) and if(global_five!=5)",
        "message": "",
        "status": "Checked"
      },
      "15": {
        "code": " * */",
        "message": "",
        "status": "Checked"
      },
      "16": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "17": {
        "code": "#include \"std_testcase.h\"",
        "message": "",
        "status": "Checked"
      },
      "18": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "19": {
        "code": "#include <wchar.h>",
        "message": "",
        "status": "Checked"
      },
      "20": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "21": {
        "code": "namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_14",
        "message": "",
        "status": "Checked"
      },
      "22": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "23": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "24": {
        "code": "#ifndef OMITBAD",
        "message": "",
        "status": "Checked"
      },
      "25": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "26": {
        "code": "void bad()",
        "message": "",
        "status": "Checked"
      },
      "27": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "28": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "29": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "30": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "31": {
        "code": "    if(global_five==5)",
        "message": "",
        "status": "Checked"
      },
      "32": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "33": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "34": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "35": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "36": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "37": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "38": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "39": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "40": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "41": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "42": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "43": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "44": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "45": {
        "code": "    if(global_five==5)",
        "message": "",
        "status": "Checked"
      },
      "46": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "47": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "48": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "49": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "50": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "51": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "52": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "53": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "54": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "55": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "56": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "57": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "58": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "59": {
        "code": "#endif /* OMITBAD */",
        "message": "",
        "status": "Checked"
      },
      "60": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "61": {
        "code": "#ifndef OMITGOOD",
        "message": "",
        "status": "Checked"
      },
      "62": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "63": {
        "code": "/* goodB2G1() - use badsource and goodsink by changing the second global_five==5 to global_five!=5 */",
        "message": "",
        "status": "Checked"
      },
      "64": {
        "code": "static void goodB2G1()",
        "message": "",
        "status": "Checked"
      },
      "65": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "66": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "67": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "68": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "69": {
        "code": "    if(global_five==5)",
        "message": "",
        "status": "Checked"
      },
      "70": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "71": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "72": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "73": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "74": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "75": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "76": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "77": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "78": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "79": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "80": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "81": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "82": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "83": {
        "code": "    if(global_five!=5)",
        "message": "",
        "status": "Checked"
      },
      "84": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "85": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "86": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "87": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "88": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "89": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "90": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "91": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "92": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "93": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "94": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "95": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "96": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "97": {
        "code": "/* goodB2G2() - use badsource and goodsink by reversing the blocks in the second if */",
        "message": "",
        "status": "Checked"
      },
      "98": {
        "code": "static void goodB2G2()",
        "message": "",
        "status": "Checked"
      },
      "99": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "100": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "101": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "102": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "103": {
        "code": "    if(global_five==5)",
        "message": "",
        "status": "Checked"
      },
      "104": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "105": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "106": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "107": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "108": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "109": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "110": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "111": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "112": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "113": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "114": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "115": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "116": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "117": {
        "code": "    if(global_five==5)",
        "message": "",
        "status": "Checked"
      },
      "118": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "119": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "120": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "121": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "122": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "123": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "124": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "125": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "126": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "127": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "128": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "129": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "130": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "131": {
        "code": "/* goodG2B1() - use goodsource and badsink by changing the first global_five==5 to global_five!=5 */",
        "message": "",
        "status": "Checked"
      },
      "132": {
        "code": "static void goodG2B1()",
        "message": "",
        "status": "Checked"
      },
      "133": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "134": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "135": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "136": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "137": {
        "code": "    if(global_five!=5)",
        "message": "",
        "status": "Checked"
      },
      "138": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "139": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "140": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "141": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "142": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "143": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "144": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "145": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "146": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "147": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "148": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "149": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "150": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "151": {
        "code": "    if(global_five==5)",
        "message": "",
        "status": "Checked"
      },
      "152": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "153": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "154": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "155": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "156": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "157": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "158": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "159": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "160": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "161": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "162": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "163": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "164": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "165": {
        "code": "/* goodG2B2() - use goodsource and badsink by reversing the blocks in the first if */",
        "message": "",
        "status": "Checked"
      },
      "166": {
        "code": "static void goodG2B2()",
        "message": "",
        "status": "Checked"
      },
      "167": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "168": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "169": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "170": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "171": {
        "code": "    if(global_five==5)",
        "message": "",
        "status": "Checked"
      },
      "172": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "173": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "174": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "175": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "176": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "177": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "178": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "179": {
        "code": "        {",
        "message": "",
        "status": "Checked"
      },
      "180": {
        "code": "            wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "181": {
        "code": "            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "182": {
        "code": "            data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "183": {
        "code": "        }",
        "message": "",
        "status": "Checked"
      },
      "184": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "185": {
        "code": "    if(global_five==5)",
        "message": "",
        "status": "Checked"
      },
      "186": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "187": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "188": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "189": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "190": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "191": {
        "code": "    else",
        "message": "",
        "status": "Checked"
      },
      "192": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "193": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "194": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "195": {
        "code": "        free(data);",
        "message": "Mismatching allocation and deallocation",
        "status": "Checked"
      },
      "196": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "197": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "198": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "199": {
        "code": "void good()",
        "message": "",
        "status": "Checked"
      },
      "200": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "201": {
        "code": "    goodB2G1();",
        "message": "",
        "status": "Checked"
      },
      "202": {
        "code": "    goodB2G2();",
        "message": "",
        "status": "Checked"
      },
      "203": {
        "code": "    goodG2B1();",
        "message": "",
        "status": "Checked"
      },
      "204": {
        "code": "    goodG2B2();",
        "message": "",
        "status": "Checked"
      },
      "205": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "206": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "207": {
        "code": "#endif /* OMITGOOD */",
        "message": "",
        "status": "Checked"
      },
      "208": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "209": {
        "code": "} // close namespace",
        "message": "",
        "status": "Checked"
      },
      "210": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "211": {
        "code": "/* Below is the main(). It is only used when building this testcase on",
        "message": "",
        "status": "Checked"
      },
      "212": {
        "code": "   its own for testing or for building a binary to use in testing binary",
        "message": "",
        "status": "Checked"
      },
      "213": {
        "code": "   analysis tools. It is not used when compiling all the testcases as one",
        "message": "",
        "status": "Checked"
      },
      "214": {
        "code": "   application, which is how source code analysis tools are tested. */",
        "message": "",
        "status": "Checked"
      },
      "215": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "216": {
        "code": "#ifdef INCLUDEMAIN",
        "message": "",
        "status": "Checked"
      },
      "217": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "218": {
        "code": "using namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_14; // so that we can use good and bad easily",
        "message": "",
        "status": "Checked"
      },
      "219": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "220": {
        "code": "int main(int argc, char * argv[])",
        "message": "",
        "status": "Checked"
      },
      "221": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "222": {
        "code": "    /* seed randomness */",
        "message": "",
        "status": "Checked"
      },
      "223": {
        "code": "    srand( (unsigned)time(NULL) );",
        "message": "",
        "status": "Checked"
      },
      "224": {
        "code": "#ifndef OMITGOOD",
        "message": "",
        "status": "Checked"
      },
      "225": {
        "code": "    printLine(\"Calling good()...\");",
        "message": "",
        "status": "Checked"
      },
      "226": {
        "code": "    good();",
        "message": "",
        "status": "Checked"
      },
      "227": {
        "code": "    printLine(\"Finished good()\");",
        "message": "",
        "status": "Checked"
      },
      "228": {
        "code": "#endif /* OMITGOOD */",
        "message": "",
        "status": "Checked"
      },
      "229": {
        "code": "#ifndef OMITBAD",
        "message": "",
        "status": "Checked"
      },
      "230": {
        "code": "    printLine(\"Calling bad()...\");",
        "message": "",
        "status": "Checked"
      },
      "231": {
        "code": "    bad();",
        "message": "",
        "status": "Checked"
      },
      "232": {
        "code": "    printLine(\"Finished bad()\");",
        "message": "",
        "status": "Checked"
      },
      "233": {
        "code": "#endif /* OMITBAD */",
        "message": "",
        "status": "Checked"
      },
      "234": {
        "code": "    return 0;",
        "message": "",
        "status": "Checked"
      },
      "235": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "236": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "237": {
        "code": "#endif",
        "message": "",
        "status": "Checked"
      }
    }
  },
  "Limited_test_cases/CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_15.cpp": {
    "token": {
      "toks": "namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_15 { void bad ( ) { wchar_t * data ; data = NULL ; switch ( 6 ) { case 6 : ; { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } break ; default : ; data = new wchar_t ; break ; } switch ( 7 ) { case 7 : ; delete data ; break ; default : ; free ( data ) ; break ; } } static void goodB2G1 ( ) { wchar_t * data ; data = NULL ; switch ( 6 ) { case 6 : ; { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } break ; default : ; data = new wchar_t ; break ; } switch ( 8 ) { case 7 : ; delete data ; break ; default : ; free ( data ) ; break ; } } static void goodB2G2 ( ) { wchar_t * data ; data = NULL ; switch ( 6 ) { case 6 : ; { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } break ; default : ; data = new wchar_t ; break ; } switch ( 7 ) { case 7 : ; free ( data ) ; break ; default : ; delete data ; break ; } } static void goodG2B1 ( ) { wchar_t * data ; data = NULL ; switch ( 5 ) { case 6 : ; { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } break ; default : ; data = new wchar_t ; break ; } switch ( 7 ) { case 7 : ; delete data ; break ; default : ; free ( data ) ; break ; } } static void goodG2B2 ( ) { wchar_t * data ; data = NULL ; switch ( 6 ) { case 6 : ; data = new wchar_t ; break ; default : ; { wchar_t mystring [ 9 ] = L\"mystring\" ; data = wcsdup ( mystring ) ; } break ; } switch ( 7 ) { case 7 : ; delete data ; break ; default : ; free ( data ) ; break ; } } void good ( ) { goodB2G1 ( ) ; goodB2G2 ( ) ; goodG2B1 ( ) ; goodG2B2 ( ) ; } } using namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_15 ; int main ( int argc , char * argv [ ] ) { srand ( ( int ) time ( NULL ) ) ; printLine ( \"Calling good()...\" ) ; good ( ) ; printLine ( \"Finished good()\" ) ; printLine ( \"Calling bad()...\" ) ; bad ( ) ; printLine ( \"Finished bad()\" ) ; return 0 ; } ",
      "num_checks": 27,
      "errs": [""],
      "preprocessor_config": ""
    },
    "data": {
      "1": {
        "code": "/* TEMPLATE GENERATED TESTCASE FILE",
        "message": "",
        "status": "Checked"
      },
      "2": {
        "code": "Filename: CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_15.cpp",
        "message": "",
        "status": "Checked"
      },
      "3": {
        "code": "Label Definition File: CWE762_Mismatched_Memory_Management_Routines__strdup_delete.label.xml",
        "message": "",
        "status": "Checked"
      },
      "4": {
        "code": "Template File: sources-sinks-15.tmpl.cpp",
        "message": "",
        "status": "Checked"
      },
      "5": {
        "code": "*/",
        "message": "",
        "status": "Checked"
      },
      "6": {
        "code": "/*",
        "message": "",
        "status": "Checked"
      },
      "7": {
        "code": " * @description",
        "message": "",
        "status": "Checked"
      },
      "8": {
        "code": " * CWE: 762 Mismatched Memory Management Routines",
        "message": "",
        "status": "Checked"
      },
      "9": {
        "code": " * BadSource:  Allocate data using wcsdup()",
        "message": "",
        "status": "Checked"
      },
      "10": {
        "code": " * GoodSource: Allocate data using new",
        "message": "",
        "status": "Checked"
      },
      "11": {
        "code": " * Sinks:",
        "message": "",
        "status": "Checked"
      },
      "12": {
        "code": " *    GoodSink: Deallocate data using free()",
        "message": "",
        "status": "Checked"
      },
      "13": {
        "code": " *    BadSink : Deallocate data using delete",
        "message": "",
        "status": "Checked"
      },
      "14": {
        "code": " * Flow Variant: 15 Control flow: switch(6) and switch(7)",
        "message": "",
        "status": "Checked"
      },
      "15": {
        "code": " * */",
        "message": "",
        "status": "Checked"
      },
      "16": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "17": {
        "code": "#include \"std_testcase.h\"",
        "message": "",
        "status": "Checked"
      },
      "18": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "19": {
        "code": "#include <wchar.h>",
        "message": "",
        "status": "Checked"
      },
      "20": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "21": {
        "code": "namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_15",
        "message": "",
        "status": "Checked"
      },
      "22": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "23": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "24": {
        "code": "#ifndef OMITBAD",
        "message": "",
        "status": "Checked"
      },
      "25": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "26": {
        "code": "void bad()",
        "message": "",
        "status": "Checked"
      },
      "27": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "28": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "29": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "30": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "31": {
        "code": "    switch(6)",
        "message": "",
        "status": "Checked"
      },
      "32": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "33": {
        "code": "    case 6:",
        "message": "",
        "status": "Checked"
      },
      "34": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "35": {
        "code": "        wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "36": {
        "code": "        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "37": {
        "code": "        data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "38": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "39": {
        "code": "    break;",
        "message": "",
        "status": "Checked"
      },
      "40": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "41": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "42": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "43": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "44": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "45": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "46": {
        "code": "    switch(7)",
        "message": "",
        "status": "Checked"
      },
      "47": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "48": {
        "code": "    case 7:",
        "message": "",
        "status": "Checked"
      },
      "49": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "50": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "51": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "52": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "53": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "54": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "55": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "56": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "57": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "58": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "59": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "60": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "61": {
        "code": "#endif /* OMITBAD */",
        "message": "",
        "status": "Checked"
      },
      "62": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "63": {
        "code": "#ifndef OMITGOOD",
        "message": "",
        "status": "Checked"
      },
      "64": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "65": {
        "code": "/* goodB2G1() - use badsource and goodsink by changing the second switch to switch(8) */",
        "message": "",
        "status": "Checked"
      },
      "66": {
        "code": "static void goodB2G1()",
        "message": "",
        "status": "Checked"
      },
      "67": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "68": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "69": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "70": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "71": {
        "code": "    switch(6)",
        "message": "",
        "status": "Checked"
      },
      "72": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "73": {
        "code": "    case 6:",
        "message": "",
        "status": "Checked"
      },
      "74": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "75": {
        "code": "        wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "76": {
        "code": "        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "77": {
        "code": "        data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "78": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "79": {
        "code": "    break;",
        "message": "",
        "status": "Checked"
      },
      "80": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "81": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "82": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "83": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "84": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "85": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "86": {
        "code": "    switch(8)",
        "message": "",
        "status": "Checked"
      },
      "87": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "88": {
        "code": "    case 7:",
        "message": "",
        "status": "Checked"
      },
      "89": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "90": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "91": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "92": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "93": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "94": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "95": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "96": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "97": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "98": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "99": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "100": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "101": {
        "code": "/* goodB2G2() - use badsource and goodsink by reversing the blocks in the second switch */",
        "message": "",
        "status": "Checked"
      },
      "102": {
        "code": "static void goodB2G2()",
        "message": "",
        "status": "Checked"
      },
      "103": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "104": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "105": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "106": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "107": {
        "code": "    switch(6)",
        "message": "",
        "status": "Checked"
      },
      "108": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "109": {
        "code": "    case 6:",
        "message": "",
        "status": "Checked"
      },
      "110": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "111": {
        "code": "        wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "112": {
        "code": "        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "113": {
        "code": "        data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "114": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "115": {
        "code": "    break;",
        "message": "",
        "status": "Checked"
      },
      "116": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "117": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "118": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "119": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "120": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "121": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "122": {
        "code": "    switch(7)",
        "message": "",
        "status": "Checked"
      },
      "123": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "124": {
        "code": "    case 7:",
        "message": "",
        "status": "Checked"
      },
      "125": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "126": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "127": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "128": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "129": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "130": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "131": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "132": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "133": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "134": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "135": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "136": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "137": {
        "code": "/* goodG2B1() - use goodsource and badsink by changing the first switch to switch(5) */",
        "message": "",
        "status": "Checked"
      },
      "138": {
        "code": "static void goodG2B1()",
        "message": "",
        "status": "Checked"
      },
      "139": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "140": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "141": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "142": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "143": {
        "code": "    switch(5)",
        "message": "",
        "status": "Checked"
      },
      "144": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "145": {
        "code": "    case 6:",
        "message": "",
        "status": "Checked"
      },
      "146": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "147": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "148": {
        "code": "        wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "149": {
        "code": "        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "150": {
        "code": "        data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "151": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "152": {
        "code": "    break;",
        "message": "",
        "status": "Checked"
      },
      "153": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "154": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "155": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "156": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "157": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "158": {
        "code": "    switch(7)",
        "message": "",
        "status": "Checked"
      },
      "159": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "160": {
        "code": "    case 7:",
        "message": "",
        "status": "Checked"
      },
      "161": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "162": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "163": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "164": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "165": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "166": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "167": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "168": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "169": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "170": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "171": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "172": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "173": {
        "code": "/* goodG2B2() - use goodsource and badsink by reversing the blocks in the first switch */",
        "message": "",
        "status": "Checked"
      },
      "174": {
        "code": "static void goodG2B2()",
        "message": "",
        "status": "Checked"
      },
      "175": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "176": {
        "code": "    wchar_t * data;",
        "message": "",
        "status": "Checked"
      },
      "177": {
        "code": "    /* Initialize data*/",
        "message": "",
        "status": "Checked"
      },
      "178": {
        "code": "    data = NULL;",
        "message": "",
        "status": "Checked"
      },
      "179": {
        "code": "    switch(6)",
        "message": "",
        "status": "Checked"
      },
      "180": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "181": {
        "code": "    case 6:",
        "message": "",
        "status": "Checked"
      },
      "182": {
        "code": "        /* FIX: Allocate memory from the heap using new */",
        "message": "",
        "status": "Checked"
      },
      "183": {
        "code": "        data = new wchar_t;",
        "message": "",
        "status": "Checked"
      },
      "184": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "185": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "186": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "187": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "188": {
        "code": "        wchar_t mystring[] = L\"mystring\";",
        "message": "",
        "status": "Checked"
      },
      "189": {
        "code": "        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",
        "message": "",
        "status": "Checked"
      },
      "190": {
        "code": "        data = wcsdup(mystring);",
        "message": "",
        "status": "Checked"
      },
      "191": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "192": {
        "code": "    break;",
        "message": "",
        "status": "Checked"
      },
      "193": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "194": {
        "code": "    switch(7)",
        "message": "",
        "status": "Checked"
      },
      "195": {
        "code": "    {",
        "message": "",
        "status": "Checked"
      },
      "196": {
        "code": "    case 7:",
        "message": "",
        "status": "Checked"
      },
      "197": {
        "code": "        /* POTENTIAL FLAW: Deallocate memory using delete - the source memory allocation function may",
        "message": "",
        "status": "Checked"
      },
      "198": {
        "code": "         * require a call to free() to deallocate the memory */",
        "message": "",
        "status": "Checked"
      },
      "199": {
        "code": "        delete data;",
        "message": "",
        "status": "Checked"
      },
      "200": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "201": {
        "code": "    default:",
        "message": "",
        "status": "Checked"
      },
      "202": {
        "code": "        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */",
        "message": "",
        "status": "Checked"
      },
      "203": {
        "code": "        /* FIX: Deallocate the memory using free() */",
        "message": "",
        "status": "Checked"
      },
      "204": {
        "code": "        free(data);",
        "message": "",
        "status": "Checked"
      },
      "205": {
        "code": "        break;",
        "message": "",
        "status": "Checked"
      },
      "206": {
        "code": "    }",
        "message": "",
        "status": "Checked"
      },
      "207": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "208": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "209": {
        "code": "void good()",
        "message": "",
        "status": "Checked"
      },
      "210": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "211": {
        "code": "    goodB2G1();",
        "message": "",
        "status": "Checked"
      },
      "212": {
        "code": "    goodB2G2();",
        "message": "",
        "status": "Checked"
      },
      "213": {
        "code": "    goodG2B1();",
        "message": "",
        "status": "Checked"
      },
      "214": {
        "code": "    goodG2B2();",
        "message": "",
        "status": "Checked"
      },
      "215": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "216": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "217": {
        "code": "#endif /* OMITGOOD */",
        "message": "",
        "status": "Checked"
      },
      "218": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "219": {
        "code": "} // close namespace",
        "message": "",
        "status": "Checked"
      },
      "220": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "221": {
        "code": "/* Below is the main(). It is only used when building this testcase on",
        "message": "",
        "status": "Checked"
      },
      "222": {
        "code": "   its own for testing or for building a binary to use in testing binary",
        "message": "",
        "status": "Checked"
      },
      "223": {
        "code": "   analysis tools. It is not used when compiling all the testcases as one",
        "message": "",
        "status": "Checked"
      },
      "224": {
        "code": "   application, which is how source code analysis tools are tested. */",
        "message": "",
        "status": "Checked"
      },
      "225": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "226": {
        "code": "#ifdef INCLUDEMAIN",
        "message": "",
        "status": "Checked"
      },
      "227": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "228": {
        "code": "using namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_15; // so that we can use good and bad easily",
        "message": "",
        "status": "Checked"
      },
      "229": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "230": {
        "code": "int main(int argc, char * argv[])",
        "message": "",
        "status": "Checked"
      },
      "231": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "232": {
        "code": "    /* seed randomness */",
        "message": "",
        "status": "Checked"
      },
      "233": {
        "code": "    srand( (unsigned)time(NULL) );",
        "message": "",
        "status": "Checked"
      },
      "234": {
        "code": "#ifndef OMITGOOD",
        "message": "",
        "status": "Checked"
      },
      "235": {
        "code": "    printLine(\"Calling good()...\");",
        "message": "",
        "status": "Checked"
      },
      "236": {
        "code": "    good();",
        "message": "",
        "status": "Checked"
      },
      "237": {
        "code": "    printLine(\"Finished good()\");",
        "message": "",
        "status": "Checked"
      },
      "238": {
        "code": "#endif /* OMITGOOD */",
        "message": "",
        "status": "Checked"
      },
      "239": {
        "code": "#ifndef OMITBAD",
        "message": "",
        "status": "Checked"
      },
      "240": {
        "code": "    printLine(\"Calling bad()...\");",
        "message": "",
        "status": "Checked"
      },
      "241": {
        "code": "    bad();",
        "message": "",
        "status": "Checked"
      },
      "242": {
        "code": "    printLine(\"Finished bad()\");",
        "message": "",
        "status": "Checked"
      },
      "243": {
        "code": "#endif /* OMITBAD */",
        "message": "",
        "status": "Checked"
      },
      "244": {
        "code": "    return 0;",
        "message": "",
        "status": "Checked"
      },
      "245": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "246": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "247": {
        "code": "#endif",
        "message": "",
        "status": "Checked"
      }
    }
  },
  "Limited_test_cases/bit_shift_bigger_than_integral_type_or_negative.cpp": {
    "token": {
      "toks": "bit_shift_bigger_than_integral_type_or_negative :: bit_shift_bigger_than_integral_type_or_negative ( ) { } bit_shift_bigger_than_integral_type_or_negative :: ~ bit_shift_bigger_than_integral_type_or_negative ( ) { } void bit_shift_bigger_than_integral_type_or_negative :: runTests ( bool mayCrash ) { volatile int random ; random = 0 ; switch ( random ) { case 1 : ; v1 ( ) ; break ; case 2 : ; v2 ( ) ; break ; } } void bit_shift_bigger_than_integral_type_or_negative :: v1 ( ) { int i ; i = 1 ; int j ; int k ; int size ; size = 34 ; j = i << size ; k = i >> size ; } void bit_shift_bigger_than_integral_type_or_negative :: v2 ( ) { int i ; i = 1 ; int j ; int k ; int size ; size = -2 ; j = i << size ; k = i >> size ; } ",
      "errs": [
        "Limited_test_cases/bit_shift_bigger_than_integral_type_or_negative.cpp:42:8: error: Signed integer overflow for expression 'i<<size'. [integerOverflow]|%$%| j = i << size; // ERROR: bit shift bigger than integral type.|%$%|       ^"
      ],
      "num_checks": 27,
      "preprocessor_config": ""
    },
    "data": {
      "1": {
        "code": "#include \"bit_shift_bigger_than_integral_type_or_negative.h\"",
        "message": "",
        "status": "Checked"
      },
      "2": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "3": {
        "code": "// Constructor.",
        "message": "",
        "status": "Checked"
      },
      "4": {
        "code": "bit_shift_bigger_than_integral_type_or_negative::bit_shift_bigger_than_integral_type_or_negative(void)",
        "message": "",
        "status": "Checked"
      },
      "5": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "6": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "7": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "8": {
        "code": "// Constructor.",
        "message": "",
        "status": "Checked"
      },
      "9": {
        "code": "bit_shift_bigger_than_integral_type_or_negative::~bit_shift_bigger_than_integral_type_or_negative(void)",
        "message": "",
        "status": "Checked"
      },
      "10": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "11": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "12": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "13": {
        "code": "// Runs all tests.",
        "message": "",
        "status": "Checked"
      },
      "14": {
        "code": "void bit_shift_bigger_than_integral_type_or_negative::runTests(bool mayCrash)",
        "message": "",
        "status": "Checked"
      },
      "15": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "16": {
        "code": "#ifdef polyspace",
        "message": "",
        "status": "Checked"
      },
      "17": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "18": {
        "code": "\tvolatile int random = 0;",
        "message": "",
        "status": "Checked"
      },
      "19": {
        "code": "\tswitch (random)",
        "message": "",
        "status": "Checked"
      },
      "20": {
        "code": "\t{",
        "message": "",
        "status": "Checked"
      },
      "21": {
        "code": "\tcase 1: v1();",
        "message": "",
        "status": "Checked"
      },
      "22": {
        "code": "\t\tbreak;",
        "message": "",
        "status": "Checked"
      },
      "23": {
        "code": "\tcase 2: v2();",
        "message": "",
        "status": "Checked"
      },
      "24": {
        "code": "\t\tbreak;",
        "message": "",
        "status": "Checked"
      },
      "25": {
        "code": "\t}",
        "message": "",
        "status": "Checked"
      },
      "26": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "27": {
        "code": "#else",
        "message": "",
        "status": "Checked"
      },
      "28": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "29": {
        "code": "\tv1();",
        "message": "",
        "status": "Checked"
      },
      "30": {
        "code": "\tv2();",
        "message": "",
        "status": "Checked"
      },
      "31": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "32": {
        "code": "#endif",
        "message": "",
        "status": "Checked"
      },
      "33": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "34": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "35": {
        "code": "// v1: shift too big.",
        "message": "",
        "status": "Checked"
      },
      "36": {
        "code": "void bit_shift_bigger_than_integral_type_or_negative::v1(void)",
        "message": "",
        "status": "Checked"
      },
      "37": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "38": {
        "code": "\tint i = 1;",
        "message": "",
        "status": "Checked"
      },
      "39": {
        "code": "\tint j,k;",
        "message": "",
        "status": "Checked"
      },
      "40": {
        "code": "\tint size = 34;",
        "message": "",
        "status": "Checked"
      },
      "41": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "42": {
        "code": "\tj = i << size; // ERROR: bit shift bigger than integral type.",
        "message": "Signed integer overflow for expression 'i<<size'. [integerOverflow]|%$%| j = i << size; // ERROR",
        "status": "Checked"
      },
      "43": {
        "code": "\tk = i >> size; // ERROR: bit shift bigger than integral type.",
        "message": "",
        "status": "Checked"
      },
      "44": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "45": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "46": {
        "code": "// v2: negative shift.",
        "message": "",
        "status": "Checked"
      },
      "47": {
        "code": "void bit_shift_bigger_than_integral_type_or_negative::v2(void)",
        "message": "",
        "status": "Checked"
      },
      "48": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "49": {
        "code": "\tint i = 1;",
        "message": "",
        "status": "Checked"
      },
      "50": {
        "code": "\tint j,k;",
        "message": "",
        "status": "Checked"
      },
      "51": {
        "code": "\tint size = -2;",
        "message": "",
        "status": "Checked"
      },
      "52": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "53": {
        "code": "\tj = i << size; // ERROR: bit shift of negative value.",
        "message": "",
        "status": "Checked"
      },
      "54": {
        "code": "\tk = i >> size; // ERROR: bit shift of negative value.",
        "message": "",
        "status": "Checked"
      },
      "55": {
        "code": "}",
        "message": "",
        "status": "Checked"
      }
    }
  },
  "Limited_test_cases/call_of_free_with_an_invalid_pointer.cpp": {
    "token": {
      "toks": "call_of_free_with_an_invalid_pointer :: call_of_free_with_an_invalid_pointer ( ) { } call_of_free_with_an_invalid_pointer :: ~ call_of_free_with_an_invalid_pointer ( ) { } void call_of_free_with_an_invalid_pointer :: runTests ( bool mayCrash ) { if ( mayCrash != 0 ) { v1 ( ) ; } } void call_of_free_with_an_invalid_pointer :: v1 ( ) { int i ; int * j ; struct S * p ; p = ( struct S * ) malloc ( sizeof ( struct S ) ) ; j = & i ; free ( j ) ; free ( p ) ; } ",
      "num_checks": 27,
      "errs": [""],
      "preprocessor_config": ""
    },
    "data": {
      "1": {
        "code": "#include \"call_of_free_with_an_invalid_pointer.h\"",
        "message": "",
        "status": "Checked"
      },
      "2": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "3": {
        "code": "// Constructor.",
        "message": "",
        "status": "Checked"
      },
      "4": {
        "code": "call_of_free_with_an_invalid_pointer::call_of_free_with_an_invalid_pointer(void)",
        "message": "",
        "status": "Checked"
      },
      "5": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "6": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "7": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "8": {
        "code": "// Destructor.",
        "message": "",
        "status": "Checked"
      },
      "9": {
        "code": "call_of_free_with_an_invalid_pointer::~call_of_free_with_an_invalid_pointer(void)",
        "message": "",
        "status": "Checked"
      },
      "10": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "11": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "12": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "13": {
        "code": "// Runs all tests.",
        "message": "",
        "status": "Checked"
      },
      "14": {
        "code": "void call_of_free_with_an_invalid_pointer::runTests(bool mayCrash)",
        "message": "",
        "status": "Checked"
      },
      "15": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "16": {
        "code": "\tif (mayCrash != 0)",
        "message": "",
        "status": "Checked"
      },
      "17": {
        "code": "\t{",
        "message": "",
        "status": "Checked"
      },
      "18": {
        "code": "\t\tv1();",
        "message": "",
        "status": "Checked"
      },
      "19": {
        "code": "\t}",
        "message": "",
        "status": "Checked"
      },
      "20": {
        "code": "}",
        "message": "",
        "status": "Checked"
      },
      "21": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "22": {
        "code": "// v1: a bad pointer is passed to free().",
        "message": "",
        "status": "Checked"
      },
      "23": {
        "code": "void call_of_free_with_an_invalid_pointer::v1(void)",
        "message": "",
        "status": "Checked"
      },
      "24": {
        "code": "{",
        "message": "",
        "status": "Checked"
      },
      "25": {
        "code": "\tint i;",
        "message": "",
        "status": "Checked"
      },
      "26": {
        "code": "\tint *j;",
        "message": "",
        "status": "Checked"
      },
      "27": {
        "code": "    struct S *p;",
        "message": "",
        "status": "Checked"
      },
      "28": {
        "code": "",
        "message": "",
        "status": "Checked"
      },
      "29": {
        "code": "    p = (struct S*)malloc(sizeof(struct S));",
        "message": "",
        "status": "Checked"
      },
      "30": {
        "code": "    j = &i;",
        "message": "",
        "status": "Checked"
      },
      "31": {
        "code": "\tfree(j); // ERROR: should be \"free(p)\".",
        "message": "",
        "status": "Checked"
      },
      "32": {
        "code": "\tfree(p); // To prevent the detection of a leak.",
        "message": "",
        "status": "Checked"
      },
      "33": {
        "code": "}",
        "message": "",
        "status": "Checked"
      }
    }
  }
}
