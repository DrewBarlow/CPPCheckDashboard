(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{5557:function(e,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return a(2773)}])},2773:function(e,s,a){"use strict";a.r(s),a.d(s,{default:function(){return g}});var r=a(5893),o=a(9008),d=a.n(o),c=a(9854),l=a.n(c),t=JSON.parse('{"sard/CWE415_Double_Free/CWE415_Double_Free__malloc_free_struct_42.c":{"token":{"num_checks":27,"preprocessor_config":["","INCLUDEMAIN"]},"data":{"1":{"code":"#ifndef OMITBAD","message":"","Checked":false,"error":false},"2":{"code":"","message":"","Checked":false,"error":false},"3":{"code":"static twoIntsStruct * badSource(twoIntsStruct * data)","message":"","Checked":true,"error":false},"4":{"code":"{","message":"","Checked":true,"error":false},"5":{"code":"    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));","message":"","Checked":true,"error":false},"6":{"code":"    if (data == NULL) {exit(-1);}","message":"","Checked":true,"error":false},"7":{"code":"    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */","message":"","Checked":false,"error":false},"8":{"code":"    free(data);","message":"","Checked":true,"error":false},"9":{"code":"    return data;","message":"","Checked":true,"error":false},"10":{"code":"}","message":"","Checked":true,"error":false},"11":{"code":"","message":"","Checked":false,"error":false},"12":{"code":"void CWE415_Double_Free__malloc_free_struct_42_bad()","message":"","Checked":true,"error":false},"13":{"code":"{","message":"","Checked":true,"error":false},"14":{"code":"    twoIntsStruct * data;","message":"","Checked":true,"error":false},"15":{"code":"    /* Initialize data */","message":"","Checked":false,"error":false},"16":{"code":"    data = NULL;","message":"","Checked":true,"error":false},"17":{"code":"    data = badSource(data);","message":"","Checked":true,"error":false},"18":{"code":"    /* POTENTIAL FLAW: Possibly freeing memory twice */","message":"","Checked":false,"error":false},"19":{"code":"    free(data);","message":"","Checked":true,"error":false},"20":{"code":"}","message":"","Checked":true,"error":false},"21":{"code":"","message":"","Checked":false,"error":false},"22":{"code":"#endif /* OMITBAD */","message":"","Checked":false,"error":false},"23":{"code":"","message":"","Checked":false,"error":false},"24":{"code":"#ifndef OMITGOOD","message":"","Checked":false,"error":false},"25":{"code":"","message":"","Checked":false,"error":false},"26":{"code":"/* goodG2B uses the GoodSource with the BadSink */","message":"","Checked":false,"error":false},"27":{"code":"static twoIntsStruct * goodG2BSource(twoIntsStruct * data)","message":"","Checked":true,"error":false},"28":{"code":"{","message":"","Checked":true,"error":false},"29":{"code":"    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));","message":"","Checked":true,"error":false},"30":{"code":"    if (data == NULL) {exit(-1);}","message":"","Checked":true,"error":false},"31":{"code":"    /* FIX: Do NOT free data in the source - the bad sink frees data */","message":"","Checked":false,"error":false},"32":{"code":"    return data;","message":"","Checked":true,"error":false},"33":{"code":"}","message":"","Checked":true,"error":false},"34":{"code":"","message":"","Checked":false,"error":false},"35":{"code":"static void goodG2B()","message":"","Checked":true,"error":false},"36":{"code":"{","message":"","Checked":true,"error":false},"37":{"code":"    twoIntsStruct * data;","message":"","Checked":true,"error":false},"38":{"code":"    /* Initialize data */","message":"","Checked":false,"error":false},"39":{"code":"    data = NULL;","message":"","Checked":true,"error":false},"40":{"code":"    data = goodG2BSource(data);","message":"","Checked":true,"error":false},"41":{"code":"    /* POTENTIAL FLAW: Possibly freeing memory twice */","message":"","Checked":false,"error":false},"42":{"code":"    free(data);","message":"","Checked":true,"error":false},"43":{"code":"}","message":"","Checked":true,"error":false},"44":{"code":"","message":"","Checked":false,"error":false},"45":{"code":"/* goodB2G uses the BadSource with the GoodSink */","message":"","Checked":false,"error":false},"46":{"code":"static twoIntsStruct * goodB2GSource(twoIntsStruct * data)","message":"","Checked":true,"error":false},"47":{"code":"{","message":"","Checked":true,"error":false},"48":{"code":"    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));","message":"","Checked":true,"error":false},"49":{"code":"    if (data == NULL) {exit(-1);}","message":"","Checked":true,"error":false},"50":{"code":"    /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */","message":"","Checked":false,"error":false},"51":{"code":"    free(data);","message":"","Checked":true,"error":false},"52":{"code":"    return data;","message":"Returning/dereferencing \'data\' after it is deallocated / released [deallocret]|%$%|    return data;|%$%|    ^","Checked":true,"error":true},"53":{"code":"}","message":"","Checked":true,"error":false},"54":{"code":"","message":"","Checked":false,"error":false},"55":{"code":"static void goodB2G()","message":"","Checked":true,"error":false},"56":{"code":"{","message":"","Checked":true,"error":false},"57":{"code":"    twoIntsStruct * data;","message":"","Checked":true,"error":false},"58":{"code":"    /* Initialize data */","message":"","Checked":false,"error":false},"59":{"code":"    data = NULL;","message":"","Checked":true,"error":false},"60":{"code":"    data = goodB2GSource(data);","message":"","Checked":true,"error":false},"61":{"code":"    /* do nothing */","message":"","Checked":false,"error":false},"62":{"code":"    /* FIX: Don\'t attempt to free the memory */","message":"","Checked":false,"error":false},"63":{"code":"    ; /* empty statement needed for some flow variants */","message":"","Checked":false,"error":false},"64":{"code":"}","message":"","Checked":true,"error":false},"65":{"code":"","message":"","Checked":false,"error":false},"66":{"code":"void CWE415_Double_Free__malloc_free_struct_42_good()","message":"","Checked":true,"error":false},"67":{"code":"{","message":"","Checked":true,"error":false},"68":{"code":"    goodB2G();","message":"","Checked":true,"error":false},"69":{"code":"    goodG2B();","message":"","Checked":true,"error":false},"70":{"code":"}","message":"","Checked":true,"error":false},"71":{"code":"","message":"","Checked":false,"error":false},"72":{"code":"#endif /* OMITGOOD */","message":"","Checked":false,"error":false},"73":{"code":"","message":"","Checked":false,"error":false},"74":{"code":"/* Below is the main(). It is only used when building this testcase on","message":"","Checked":false,"error":false},"75":{"code":"   its own for testing or for building a binary to use in testing binary","message":"","Checked":false,"error":false},"76":{"code":"   analysis tools. It is not used when compiling all the testcases as one","message":"","Checked":false,"error":false},"77":{"code":"   application, which is how source code analysis tools are tested. */","message":"","Checked":false,"error":false},"78":{"code":"","message":"","Checked":false,"error":false},"79":{"code":"#ifdef INCLUDEMAIN","message":"","Checked":false,"error":false},"80":{"code":"","message":"","Checked":false,"error":false},"81":{"code":"int main(int argc, char * argv[])","message":"","Checked":true,"error":false},"82":{"code":"{","message":"","Checked":true,"error":false},"83":{"code":"    /* seed randomness */","message":"","Checked":false,"error":false},"84":{"code":"    srand( (unsigned)time(NULL) );","message":"","Checked":true,"error":false},"85":{"code":"#ifndef OMITGOOD","message":"","Checked":false,"error":false},"86":{"code":"    printLine(\\"Calling good()...\\");","message":"","Checked":true,"error":false},"87":{"code":"    CWE415_Double_Free__malloc_free_struct_42_good();","message":"","Checked":true,"error":false},"88":{"code":"    printLine(\\"Finished good()\\");","message":"","Checked":true,"error":false},"89":{"code":"#endif /* OMITGOOD */","message":"","Checked":false,"error":false},"90":{"code":"#ifndef OMITBAD","message":"","Checked":false,"error":false},"91":{"code":"    printLine(\\"Calling bad()...\\");","message":"","Checked":true,"error":false},"92":{"code":"    CWE415_Double_Free__malloc_free_struct_42_bad();","message":"","Checked":true,"error":false},"93":{"code":"    printLine(\\"Finished bad()\\");","message":"","Checked":true,"error":false},"94":{"code":"#endif /* OMITBAD */","message":"","Checked":false,"error":false},"95":{"code":"    return 0;","message":"","Checked":true,"error":false},"96":{"code":"}","message":"","Checked":true,"error":false},"97":{"code":"","message":"","Checked":false,"error":false},"98":{"code":"#endif","message":"","Checked":false,"error":false}}},"sard/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__class_82_bad.cpp":{"token":{"num_checks":27,"preprocessor_config":[""]},"data":{"1":{"code":"/* TEMPLATE GENERATED TESTCASE FILE","message":"","Checked":false,"error":false},"2":{"code":"Filename: CWE476_NULL_Pointer_Dereference__class_82_bad.cpp","message":"","Checked":false,"error":false},"3":{"code":"Label Definition File: CWE476_NULL_Pointer_Dereference__class.label.xml","message":"","Checked":false,"error":false},"4":{"code":"Template File: sources-sinks-82_bad.tmpl.cpp","message":"","Checked":false,"error":false},"5":{"code":"*/","message":"","Checked":false,"error":false},"6":{"code":"/*","message":"","Checked":false,"error":false},"7":{"code":" * @description","message":"","Checked":false,"error":false},"8":{"code":" * CWE: 476 NULL Pointer Dereference","message":"","Checked":false,"error":false},"9":{"code":" * BadSource:  Set data to NULL","message":"","Checked":false,"error":false},"10":{"code":" * GoodSource: Initialize data","message":"","Checked":false,"error":false},"11":{"code":" * Sinks:","message":"","Checked":false,"error":false},"12":{"code":" *    GoodSink: Check data for NULL before attempting to print data->a","message":"","Checked":false,"error":false},"13":{"code":" *    BadSink : Print data->a","message":"","Checked":false,"error":false},"14":{"code":" * Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer","message":"","Checked":false,"error":false},"15":{"code":" *","message":"","Checked":false,"error":false},"16":{"code":" * */","message":"","Checked":false,"error":false},"17":{"code":"#ifndef OMITBAD","message":"","Checked":false,"error":false},"18":{"code":"","message":"","Checked":false,"error":false},"19":{"code":"#include \\"std_testcase.h\\"","message":"","Checked":false,"error":false},"20":{"code":"#include \\"CWE476_NULL_Pointer_Dereference__class_82.h\\"","message":"","Checked":false,"error":false},"21":{"code":"","message":"","Checked":false,"error":false},"22":{"code":"namespace CWE476_NULL_Pointer_Dereference__class_82","message":"","Checked":true,"error":false},"23":{"code":"{","message":"","Checked":true,"error":false},"24":{"code":"","message":"","Checked":false,"error":false},"25":{"code":"void CWE476_NULL_Pointer_Dereference__class_82_bad::action(TwoIntsClass * data)","message":"","Checked":true,"error":false},"26":{"code":"{","message":"","Checked":true,"error":false},"27":{"code":"    /* POTENTIAL FLAW: Attempt to use data, which may be NULL */","message":"","Checked":false,"error":false},"28":{"code":"    printIntLine(data->intOne);","message":"","Checked":true,"error":false},"29":{"code":"    /* avoid memory leak - deleting a NULL pointer is a no-op in C++ so no need to check for NULL */","message":"","Checked":false,"error":false},"30":{"code":"    delete data;","message":"","Checked":true,"error":false},"31":{"code":"}","message":"","Checked":true,"error":false},"32":{"code":"","message":"","Checked":false,"error":false},"33":{"code":"}","message":"","Checked":true,"error":false},"34":{"code":"#endif /* OMITBAD */","message":"","Checked":false,"error":false}}},"sard/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__class_82_goodB2G.cpp":{"token":{"num_checks":27,"preprocessor_config":[""]},"data":{"1":{"code":"/* TEMPLATE GENERATED TESTCASE FILE","message":"","Checked":false,"error":false},"2":{"code":"Filename: CWE476_NULL_Pointer_Dereference__class_82_goodB2G.cpp","message":"","Checked":false,"error":false},"3":{"code":"Label Definition File: CWE476_NULL_Pointer_Dereference__class.label.xml","message":"","Checked":false,"error":false},"4":{"code":"Template File: sources-sinks-82_goodB2G.tmpl.cpp","message":"","Checked":false,"error":false},"5":{"code":"*/","message":"","Checked":false,"error":false},"6":{"code":"/*","message":"","Checked":false,"error":false},"7":{"code":" * @description","message":"","Checked":false,"error":false},"8":{"code":" * CWE: 476 NULL Pointer Dereference","message":"","Checked":false,"error":false},"9":{"code":" * BadSource:  Set data to NULL","message":"","Checked":false,"error":false},"10":{"code":" * GoodSource: Initialize data","message":"","Checked":false,"error":false},"11":{"code":" * Sinks:","message":"","Checked":false,"error":false},"12":{"code":" *    GoodSink: Check data for NULL before attempting to print data->a","message":"","Checked":false,"error":false},"13":{"code":" *    BadSink : Print data->a","message":"","Checked":false,"error":false},"14":{"code":" * Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer","message":"","Checked":false,"error":false},"15":{"code":" *","message":"","Checked":false,"error":false},"16":{"code":" * */","message":"","Checked":false,"error":false},"17":{"code":"#ifndef OMITGOOD","message":"","Checked":false,"error":false},"18":{"code":"","message":"","Checked":false,"error":false},"19":{"code":"#include \\"std_testcase.h\\"","message":"","Checked":false,"error":false},"20":{"code":"#include \\"CWE476_NULL_Pointer_Dereference__class_82.h\\"","message":"","Checked":false,"error":false},"21":{"code":"","message":"","Checked":false,"error":false},"22":{"code":"namespace CWE476_NULL_Pointer_Dereference__class_82","message":"","Checked":true,"error":false},"23":{"code":"{","message":"","Checked":true,"error":false},"24":{"code":"","message":"","Checked":false,"error":false},"25":{"code":"void CWE476_NULL_Pointer_Dereference__class_82_goodB2G::action(TwoIntsClass * data)","message":"","Checked":true,"error":false},"26":{"code":"{","message":"","Checked":true,"error":false},"27":{"code":"    /* FIX: Check for NULL before attempting to print data */","message":"","Checked":false,"error":false},"28":{"code":"    if (data != NULL)","message":"","Checked":true,"error":false},"29":{"code":"    {","message":"","Checked":true,"error":false},"30":{"code":"        printIntLine(data->intOne);","message":"","Checked":true,"error":false},"31":{"code":"        delete data;","message":"","Checked":true,"error":false},"32":{"code":"    }","message":"","Checked":true,"error":false},"33":{"code":"    else","message":"","Checked":true,"error":false},"34":{"code":"    {","message":"","Checked":true,"error":false},"35":{"code":"        printLine(\\"data is NULL\\");","message":"","Checked":true,"error":false},"36":{"code":"    }","message":"","Checked":true,"error":false},"37":{"code":"}","message":"","Checked":true,"error":false},"38":{"code":"","message":"","Checked":false,"error":false},"39":{"code":"}","message":"","Checked":true,"error":false},"40":{"code":"#endif /* OMITGOOD */","message":"","Checked":false,"error":false}}},"sard/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__class_82_goodG2B.cpp":{"token":{"num_checks":27,"preprocessor_config":[""]},"data":{"1":{"code":"/* TEMPLATE GENERATED TESTCASE FILE","message":"","Checked":false,"error":false},"2":{"code":"Filename: CWE476_NULL_Pointer_Dereference__class_82_goodG2B.cpp","message":"","Checked":false,"error":false},"3":{"code":"Label Definition File: CWE476_NULL_Pointer_Dereference__class.label.xml","message":"","Checked":false,"error":false},"4":{"code":"Template File: sources-sinks-82_goodG2B.tmpl.cpp","message":"","Checked":false,"error":false},"5":{"code":"*/","message":"","Checked":false,"error":false},"6":{"code":"/*","message":"","Checked":false,"error":false},"7":{"code":" * @description","message":"","Checked":false,"error":false},"8":{"code":" * CWE: 476 NULL Pointer Dereference","message":"","Checked":false,"error":false},"9":{"code":" * BadSource:  Set data to NULL","message":"","Checked":false,"error":false},"10":{"code":" * GoodSource: Initialize data","message":"","Checked":false,"error":false},"11":{"code":" * Sinks:","message":"","Checked":false,"error":false},"12":{"code":" *    GoodSink: Check data for NULL before attempting to print data->a","message":"","Checked":false,"error":false},"13":{"code":" *    BadSink : Print data->a","message":"","Checked":false,"error":false},"14":{"code":" * Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer","message":"","Checked":false,"error":false},"15":{"code":" *","message":"","Checked":false,"error":false},"16":{"code":" * */","message":"","Checked":false,"error":false},"17":{"code":"#ifndef OMITGOOD","message":"","Checked":false,"error":false},"18":{"code":"","message":"","Checked":false,"error":false},"19":{"code":"#include \\"std_testcase.h\\"","message":"","Checked":false,"error":false},"20":{"code":"#include \\"CWE476_NULL_Pointer_Dereference__class_82.h\\"","message":"","Checked":false,"error":false},"21":{"code":"","message":"","Checked":false,"error":false},"22":{"code":"namespace CWE476_NULL_Pointer_Dereference__class_82","message":"","Checked":true,"error":false},"23":{"code":"{","message":"","Checked":true,"error":false},"24":{"code":"","message":"","Checked":false,"error":false},"25":{"code":"void CWE476_NULL_Pointer_Dereference__class_82_goodG2B::action(TwoIntsClass * data)","message":"","Checked":true,"error":false},"26":{"code":"{","message":"","Checked":true,"error":false},"27":{"code":"    /* POTENTIAL FLAW: Attempt to use data, which may be NULL */","message":"","Checked":false,"error":false},"28":{"code":"    printIntLine(data->intOne);","message":"","Checked":true,"error":false},"29":{"code":"    /* avoid memory leak - deleting a NULL pointer is a no-op in C++ so no need to check for NULL */","message":"","Checked":false,"error":false},"30":{"code":"    delete data;","message":"","Checked":true,"error":false},"31":{"code":"}","message":"","Checked":true,"error":false},"32":{"code":"","message":"","Checked":false,"error":false},"33":{"code":"}","message":"","Checked":true,"error":false},"34":{"code":"#endif /* OMITGOOD */","message":"","Checked":false,"error":false}}},"sard/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__class_82a.cpp":{"token":{"num_checks":27,"preprocessor_config":["","INCLUDEMAIN"]},"data":{"1":{"code":"/* TEMPLATE GENERATED TESTCASE FILE","message":"","Checked":false,"error":false},"2":{"code":"Filename: CWE476_NULL_Pointer_Dereference__class_82a.cpp","message":"","Checked":false,"error":false},"3":{"code":"Label Definition File: CWE476_NULL_Pointer_Dereference__class.label.xml","message":"","Checked":false,"error":false},"4":{"code":"Template File: sources-sinks-82a.tmpl.cpp","message":"","Checked":false,"error":false},"5":{"code":"*/","message":"","Checked":false,"error":false},"6":{"code":"/*","message":"","Checked":false,"error":false},"7":{"code":" * @description","message":"","Checked":false,"error":false},"8":{"code":" * CWE: 476 NULL Pointer Dereference","message":"","Checked":false,"error":false},"9":{"code":" * BadSource:  Set data to NULL","message":"","Checked":false,"error":false},"10":{"code":" * GoodSource: Initialize data","message":"","Checked":false,"error":false},"11":{"code":" * Sinks:","message":"","Checked":false,"error":false},"12":{"code":" *    GoodSink: Check data for NULL before attempting to print data->a","message":"","Checked":false,"error":false},"13":{"code":" *    BadSink : Print data->a","message":"","Checked":false,"error":false},"14":{"code":" * Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer","message":"","Checked":false,"error":false},"15":{"code":" *","message":"","Checked":false,"error":false},"16":{"code":" * */","message":"","Checked":false,"error":false},"17":{"code":"","message":"","Checked":false,"error":false},"18":{"code":"#include \\"std_testcase.h\\"","message":"","Checked":false,"error":false},"19":{"code":"#include \\"CWE476_NULL_Pointer_Dereference__class_82.h\\"","message":"","Checked":false,"error":false},"20":{"code":"","message":"","Checked":false,"error":false},"21":{"code":"namespace CWE476_NULL_Pointer_Dereference__class_82","message":"","Checked":true,"error":false},"22":{"code":"{","message":"","Checked":true,"error":false},"23":{"code":"","message":"Class \'CWE476_NULL_Pointer_Dereference__class_82_base\' which is inherited by class \'CWE476_NULL_Pointer_Dereference__class_82_goodB2G\' does not have a virtual destructor. [virtualDestructor]|%$%|class CWE476_NULL_Pointer_Dereference__class_82_base|%$%|^","Checked":false,"error":true},"24":{"code":"#ifndef OMITBAD","message":"","Checked":false,"error":false},"25":{"code":"","message":"","Checked":false,"error":false},"26":{"code":"void bad()","message":"","Checked":true,"error":false},"27":{"code":"{","message":"","Checked":true,"error":false},"28":{"code":"    TwoIntsClass * data;","message":"","Checked":true,"error":false},"29":{"code":"    /* POTENTIAL FLAW: Set data to NULL */","message":"","Checked":false,"error":false},"30":{"code":"    data = NULL;","message":"","Checked":true,"error":false},"31":{"code":"    CWE476_NULL_Pointer_Dereference__class_82_base* baseObject = new CWE476_NULL_Pointer_Dereference__class_82_bad;","message":"","Checked":true,"error":false},"32":{"code":"    baseObject->action(data);","message":"","Checked":true,"error":false},"33":{"code":"    delete baseObject;","message":"","Checked":true,"error":false},"34":{"code":"}","message":"","Checked":true,"error":false},"35":{"code":"","message":"","Checked":false,"error":false},"36":{"code":"#endif /* OMITBAD */","message":"","Checked":false,"error":false},"37":{"code":"","message":"","Checked":false,"error":false},"38":{"code":"#ifndef OMITGOOD","message":"","Checked":false,"error":false},"39":{"code":"","message":"","Checked":false,"error":false},"40":{"code":"/* goodG2B uses the GoodSource with the BadSink */","message":"","Checked":false,"error":false},"41":{"code":"static void goodG2B()","message":"","Checked":true,"error":false},"42":{"code":"{","message":"","Checked":true,"error":false},"43":{"code":"    TwoIntsClass * data;","message":"","Checked":true,"error":false},"44":{"code":"    {","message":"","Checked":true,"error":false},"45":{"code":"        TwoIntsClass * tmpData = new TwoIntsClass;","message":"","Checked":true,"error":false},"46":{"code":"        tmpData->intOne = 0;","message":"","Checked":true,"error":false},"47":{"code":"        tmpData->intTwo = 0;","message":"","Checked":true,"error":false},"48":{"code":"        /* FIX: Initialize data */","message":"","Checked":false,"error":false},"49":{"code":"        data = tmpData;","message":"","Checked":true,"error":false},"50":{"code":"    }","message":"","Checked":true,"error":false},"51":{"code":"    CWE476_NULL_Pointer_Dereference__class_82_base* baseObject = new CWE476_NULL_Pointer_Dereference__class_82_goodG2B;","message":"","Checked":true,"error":false},"52":{"code":"    baseObject->action(data);","message":"","Checked":true,"error":false},"53":{"code":"    delete baseObject;","message":"","Checked":true,"error":false},"54":{"code":"}","message":"","Checked":true,"error":false},"55":{"code":"","message":"","Checked":false,"error":false},"56":{"code":"/* goodB2G uses the BadSource with the GoodSink */","message":"","Checked":false,"error":false},"57":{"code":"static void goodB2G()","message":"","Checked":true,"error":false},"58":{"code":"{","message":"","Checked":true,"error":false},"59":{"code":"    TwoIntsClass * data;","message":"","Checked":true,"error":false},"60":{"code":"    /* POTENTIAL FLAW: Set data to NULL */","message":"","Checked":false,"error":false},"61":{"code":"    data = NULL;","message":"","Checked":true,"error":false},"62":{"code":"    CWE476_NULL_Pointer_Dereference__class_82_base* baseObject = new CWE476_NULL_Pointer_Dereference__class_82_goodB2G;","message":"","Checked":true,"error":false},"63":{"code":"    baseObject->action(data);","message":"","Checked":true,"error":false},"64":{"code":"    delete baseObject;","message":"","Checked":true,"error":false},"65":{"code":"}","message":"","Checked":true,"error":false},"66":{"code":"","message":"","Checked":false,"error":false},"67":{"code":"void good()","message":"","Checked":true,"error":false},"68":{"code":"{","message":"","Checked":true,"error":false},"69":{"code":"    goodG2B();","message":"","Checked":true,"error":false},"70":{"code":"    goodB2G();","message":"","Checked":true,"error":false},"71":{"code":"}","message":"","Checked":true,"error":false},"72":{"code":"","message":"","Checked":false,"error":false},"73":{"code":"#endif /* OMITGOOD */","message":"","Checked":false,"error":false},"74":{"code":"","message":"","Checked":false,"error":false},"75":{"code":"} /* close namespace */","message":"","Checked":true,"error":false},"76":{"code":"","message":"","Checked":false,"error":false},"77":{"code":"/* Below is the main(). It is only used when building this testcase on","message":"","Checked":false,"error":false},"78":{"code":"   its own for testing or for building a binary to use in testing binary","message":"","Checked":false,"error":false},"79":{"code":"   analysis tools. It is not used when compiling all the testcases as one","message":"","Checked":false,"error":false},"80":{"code":"   application, which is how source code analysis tools are tested. */","message":"","Checked":false,"error":false},"81":{"code":"","message":"","Checked":false,"error":false},"82":{"code":"#ifdef INCLUDEMAIN","message":"","Checked":false,"error":false},"83":{"code":"","message":"","Checked":false,"error":false},"84":{"code":"using namespace CWE476_NULL_Pointer_Dereference__class_82; /* so that we can use good and bad easily */","message":"","Checked":true,"error":false},"85":{"code":"","message":"","Checked":false,"error":false},"86":{"code":"int main(int argc, char * argv[])","message":"","Checked":true,"error":false},"87":{"code":"{","message":"","Checked":true,"error":false},"88":{"code":"    /* seed randomness */","message":"","Checked":false,"error":false},"89":{"code":"    srand( (unsigned)time(NULL) );","message":"","Checked":true,"error":false},"90":{"code":"#ifndef OMITGOOD","message":"","Checked":false,"error":false},"91":{"code":"    printLine(\\"Calling good()...\\");","message":"","Checked":true,"error":false},"92":{"code":"    good();","message":"","Checked":true,"error":false},"93":{"code":"    printLine(\\"Finished good()\\");","message":"","Checked":true,"error":false},"94":{"code":"#endif /* OMITGOOD */","message":"","Checked":false,"error":false},"95":{"code":"#ifndef OMITBAD","message":"","Checked":false,"error":false},"96":{"code":"    printLine(\\"Calling bad()...\\");","message":"","Checked":true,"error":false},"97":{"code":"    bad();","message":"","Checked":true,"error":false},"98":{"code":"    printLine(\\"Finished bad()\\");","message":"","Checked":true,"error":false},"99":{"code":"#endif /* OMITBAD */","message":"","Checked":false,"error":false},"100":{"code":"    return 0;","message":"","Checked":true,"error":false},"101":{"code":"}","message":"","Checked":true,"error":false},"102":{"code":"","message":"","Checked":false,"error":false},"103":{"code":"#endif","message":"","Checked":false,"error":false}}}}'),n=a(7294);function f(){return(0,r.jsx)("div",{children:(0,r.jsxs)("div",{className:"card p-4 my-4 w-48 bg-black",children:[(0,r.jsxs)("div",{children:[(0,r.jsx)("span",{class:"badge badge-xs bg-success"})," Scanned"]}),(0,r.jsxs)("div",{children:[(0,r.jsx)("span",{class:"badge badge-xs bg-warning"})," Non-Scanned"]}),(0,r.jsxs)("div",{children:[(0,r.jsx)("span",{class:"badge badge-xs bg-error"})," Error"]})]})})}function i(e){let{linesOfCode:s,errorsFound:a,nonLinesOfCode:o,numChecks:d,preprocessorConfig:c}=e;return(0,r.jsxs)("div",{className:"md:col-span-2 col-span-full px-2",children:[(0,r.jsx)("div",{children:(0,r.jsx)("h1",{className:"py-4 text-center text-5xl text-slate-300 font-thin",children:"Scan Statistic"})}),(0,r.jsxs)("div",{className:"stats stats-vertical lg:stats-vertical shadow bg-neutral-focus",children:[(0,r.jsxs)("div",{className:"stat",children:[(0,r.jsx)("div",{className:"stat-title",children:"LOC Total"}),(0,r.jsx)("div",{className:"stat-value font-thin",children:s||0}),(0,r.jsx)("div",{className:"stat-desc",children:"Lines Of Code Total"})]}),(0,r.jsxs)("div",{className:"stat",children:[(0,r.jsx)("div",{className:"stat-title",children:"Error's Found"}),(0,r.jsx)("div",{className:"stat-value font-thin",children:a||0}),(0,r.jsx)("div",{className:"stat-desc",children:"Error's Found by Analyzer"})]}),(0,r.jsxs)("div",{className:"stat",children:[(0,r.jsx)("div",{className:"stat-title",children:"LOC Not Analyzed"}),(0,r.jsx)("div",{className:"stat-value font-thin",children:o||0}),(0,r.jsx)("div",{className:"stat-desc",children:"Lines Of Code Not Analyzed"})]}),(0,r.jsxs)("div",{className:"stat",children:[(0,r.jsx)("div",{className:"stat-title",children:"NOC Preformed"}),(0,r.jsx)("div",{className:"stat-value font-thin",children:d}),(0,r.jsx)("div",{className:"stat-desc",children:"Number of Checks Preformed On The Program"})]}),(0,r.jsxs)("div",{className:"stat",children:[(0,r.jsx)("div",{className:"stat-title",children:"Preprocessor Configuration"}),(0,r.jsx)("div",{className:"stat-value font-thin",children:(console.log(c),c!==[""]?c.map(e=>e===c[c.length-1]||""===e?e:e+"&"):"N/A")}),(0,r.jsx)("div",{className:"stat-desc",children:"Preprocessor Configuration"})]})]}),(0,r.jsx)(f,{})]})}function h(e){let{selectedFileObj:s,currentPage:a,pageIterator:o}=e,[d,c]=(0,n.useState)({isShowing:!1,currSelection:0});return(0,r.jsx)("div",{className:"md:col-span-9 col-span-full bg-black card mockup-code",children:void 0!==s?Object.keys(s.data).slice((a-1)*o,a*o).map((e,l)=>{var t,n,f,i,h;return(0,r.jsxs)("div",{tabindex:l,className:"collapse font-mono ".concat(d.lineNumber===l&&d.isShowing&&s.data[e].message.length?"collapse-open":s.data[e].code.length<96?"h-8 collapse-close":"collapse-close"," ").concat(s.data[e].message.length?"cursor-pointer":""),onClick:a=>{s.data[e].message?c({isShowing:!d.isShowing,lineNumber:l}):a.preventDefault()},children:[(t=s.data[e].Checked,n=s.data[e].error,f=s.data[e].code,i=l+(a-1)*o+1,!0===t&&!1===n?(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("div",{className:"collapse-title text-xl text-success font-medium py-0",children:[(0,r.jsx)("span",{class:"inline-flex items-baseline text-gray-600",children:i}),"\xa0\xa0\xa0\xa0",f]})}):!0===t&&!0===n?(0,r.jsxs)("div",{className:"collapse-title text-xl text-error font-medium py-0",children:[(0,r.jsx)("span",{class:"inline-flex items-baseline text-gray-600",children:i}),"\xa0\xa0\xa0\xa0",f]}):(0,r.jsxs)("div",{className:"collapse-title text-xl text-warning font-medium py-0",children:[(0,r.jsx)("span",{class:"inline-flex items-baseline text-gray-600",children:i}),"\xa0\xa0\xa0\xa0",f]})),""===(h=s.data[e].message)?(0,r.jsx)(r.Fragment,{}):(0,r.jsx)("div",{className:"collapse-content text-white",children:(0,r.jsx)("p",{children:h})})]},e)}):(0,r.jsx)(r.Fragment,{})})}function m(e){var s,a,o,d,c,l;let t,f;let{scanResults:m}=e,[g,C]=(0,n.useState)(null),[k,u]=(0,n.useState)(0),[_,L]=(0,n.useState)(0),[p,x]=(0,n.useState)(1e3),N=Object.keys(m);return(0,r.jsxs)("div",{className:"mx-16",children:[(0,r.jsx)("div",{children:(0,r.jsx)("div",{className:"flex items-center",children:(0,r.jsx)("h1",{className:"py-4 text-6xl text-slate-300 font-thin text-center break-all",children:g||"Select File"})})}),(0,r.jsxs)("div",{children:[(0,r.jsx)("div",{children:(0,r.jsxs)("select",{className:"select select-info w-full max-w-lg my-2",onChange:function(e){let{value:s}=e.target,a=m[s].data,r=Object.keys(a).length;u(Math.ceil(r/p)),L(1),C(s)},defaultValue:"default",children:[(0,r.jsx)("option",{disabled:!0,value:"default",children:"Select A File"}),N.map(e=>(0,r.jsx)("option",{children:e},e))]})}),(0,r.jsx)("div",{children:m[g]&&(0,r.jsxs)("select",{className:"select select-info w-full max-w-xs my-2",onChange:function(e){let{value:s}=e.target,a=parseInt(s.split(" ")[0]);x(a);let r=Object.keys(m[g].data).length;u(Math.ceil(r/a)),L(1)},defaultValue:"default",children:[(0,r.jsx)("option",{disabled:!0,value:"default",children:"Select Pagination Iteration - Default 1000"}),(0,r.jsx)("option",{children:"50 Lines Of Page"},50),(0,r.jsx)("option",{children:"100 Lines Per Page"},100),(0,r.jsx)("option",{children:"1000 Lines Per Page"},1e3),(0,r.jsx)("option",{children:"5000 Lines Per Page"},5e3)]})})]}),(0,r.jsxs)("div",{className:"grid md:grid-cols-12 grid-rows",children:[m[g]&&(0,r.jsx)(h,{selectedFileObj:m[g],currentPage:_,pageIterator:p}),m[g]&&(0,r.jsx)(i,{linesOfCode:Object.keys(m[g].data).length,errorsFound:(t=0,Object.keys(m[g].data).map((e,s)=>{!0===m[g].data[e].error&&(t+=1)}),t),nonLinesOfCode:(m[g].data,f=0,Object.keys(m[g].data).map((e,s)=>{!1===m[g].data[e].Checked&&(f+=1)}),f),numChecks:(null===(s=m[g])||void 0===s?void 0:null===(a=s.token)||void 0===a?void 0:a.num_checks)||0,preprocessorConfig:(null===(o=m[g])||void 0===o?void 0:null===(d=o.token)||void 0===d?void 0:d.preprocessor_config)||"N/A"})]}),k>1&&(0,r.jsxs)("div",{className:" py-4",children:[(0,r.jsx)("button",{className:"btn rounded-r-none",onClick:function(){_>1&&L(_-1)},children:"\xab"}),(0,r.jsxs)("div",{className:"dropdown",children:[(0,r.jsxs)("label",{tabindex:"0",className:"btn rounded-none",children:["Page ",_,"/",k]}),(0,r.jsx)("div",{tabindex:"0",className:"dropdown-content card card-compact w-64 p-2 shadow bg-neutral-focus   text-primary-content",children:(0,r.jsxs)("div",{className:"card-body",children:[(0,r.jsx)("h3",{className:"card-title",children:"Navigate Page"}),(0,r.jsx)("p",{children:"Jump to a specific page"}),(0,r.jsx)("input",{type:"number",placeholder:"Place in the page",className:"input w-full max-w-xs",min:1,max:k,onChange:function(e){let{value:s}=e.target;s>=1&&s<=k&&L(s)}})]})})]}),(0,r.jsx)("button",{className:"btn rounded-l-none",onClick:function(){_<k&&L(_+1)},children:"\xbb"})]}),m[g]&&(0,r.jsx)("h1",{className:"py-2 text-xl font-light text-white",children:(0,r.jsxs)("span",{className:"flex",children:["Scan Result:\xa0",(0,r.jsxs)("p",{className:"text-success",children:[Math.round((null===(c=m[g])||void 0===c?void 0:null===(l=c.token)||void 0===l?void 0:l.num_checks)*100/27),"%"]})]})})]})}function g(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(d(),{children:[(0,r.jsx)("title",{children:"Cyber Pack Code Evaluation"}),(0,r.jsx)("meta",{name:"CppCheck Static Visual Code Analysis",content:"Visual Analysis of Scanned Programs/Application"}),(0,r.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"}),(0,r.jsx)("link",{rel:"icon",href:"/favicon.ico"})]}),(0,r.jsx)("main",{className:l().main,children:(0,r.jsxs)("div",{className:l().description,children:[(0,r.jsx)("h1",{className:"py-4 text-8xl text-center text-slate-400 font-normal",children:"Cyber Pack Code Evaluation"}),(0,r.jsx)("div",{className:"divider"}),(0,r.jsx)(m,{scanResults:function(e){let s=Object.keys(e),a=[];return s.forEach(s=>{Object.keys(e[s].data).map(function(r,o){let d=e[s].data[r].code,c=e[s].data[r].message;!(d.includes("{")&&d.includes("}"))&&d.includes("}")&&a.pop(),d&&(e[s].data[r].code=a.join("")+d),c&&(e[s].data[r].message=a.join("")+"\xa0\xa0"+c),!(d.includes("{")&&d.includes("}"))&&d.includes("{")&&a.push("\xa0\xa0")}),a=[]}),e}(t)})]})})]})}},9854:function(){},9008:function(e,s,a){e.exports=a(2636)}},function(e){e.O(0,[774,888,179],function(){return e(e.s=5557)}),_N_E=e.O()}]);